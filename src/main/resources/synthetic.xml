<?xml version='1.0' encoding='UTF-8'?>
<!--

    THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS
    FOR A PARTICULAR PURPOSE. THIS CODE AND INFORMATION ARE NOT SUPPORTED BY XEBIALABS.

-->
<!--
    Note: If you modify this file, you must restart the XL Deploy server.
-->
<synthetic xsi:schemaLocation="http://www.xebialabs.com/deployit/synthetic synthetic.xsd" xmlns="http://www.xebialabs.com/deployit/synthetic"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <type type="docker.Machine" extends="generic.Container" description="A Docker Machine that can be reached from the associated Host.">
        <property name="address" required="false"/>
        <property name="port" kind="integer" default="2376" required="false"/>
        <property name="certificatePath" required="false"/>
        <property label="TLS Verify" name="tls_verify" default="true" kind="boolean" required="false"/>
        <property name="dynamicParameters" kind="boolean" default="false" required="false" category="Advanced"
                  description="use the docker-machine env command line to generate the connection information"/>
        <property name="setEnvironmentVariables" kind="boolean" default="true" required="false" category="Advanced"
                  description="set the management variables before call the docker commands"/>
        <property name="provider" default="virtualbox" category="Advanced"/>
    </type>


    <type type="docker.RunContainer" extends="udm.BaseDeployed" deployable-type="docker.Image" container-type="docker.Machine">
        <generate-deployable type="docker.Image" extends="udm.BaseDeployable"/>
        <property name="image"/>
        <property name="entryPoint" required="false"/>
        <property name="command" required="false"/>
        <property name="args" required="false"/>
        <property name="labels" kind="set_of_string" required="false" category="Labels"/>
        <property name="network" required="false" category="Network"/>
        <property name="publishAllExposedPorts" required="false" kind="boolean" default="false" category="Network"/>
        <property name="ports" kind="set_of_ci" referenced-type="docker.Port" as-containment="true" required="false" category="Network"/>
        <property name="links" kind="set_of_ci" referenced-type="docker.Link" as-containment="true" required="false" category="Network"/>
        <property name="dependencies" kind="list_of_string" required="false" category="Deployment"
                  description="list of containers that should be created or started before."/>
        <property name="volumes" kind="set_of_ci" referenced-type="docker.Volume" as-containment="true" required="false" category="Volumes"/>
        <property name="volumesFrom" kind="set_of_string" required="false" category="Volumes"/>
        <property name="variables" kind="set_of_ci" referenced-type="docker.EnvironmentVariable" as-containment="true" required="false" category="Variables"/>
        <property name="extendedPrivileges" kind="boolean" required="false" default="false" category="Advanced"/>
        <property name="memory" required="false" category="Advanced"/>
        <property name="pidNamespace" label="PID namespace to use" required="false" category="Advanced"/>
        <property name="workDirectory" required="false" kind="boolean" default="false" category="Advanced"/>
        <property name="removeOnExit" description="Automatically remove the container when it exits" kind="boolean" default="false" required="false"
                  category="Advanced"/>
        <property name="dumpLogsAfterStartup" kind="boolean" default="true" description="Generate a step to dump log after start up the container"
                  category="Advanced"/>
        <property name="checkContainerIsRunning" kind="boolean" default="true" description="Generate a step to check whether the container is up and running."
                  category="Advanced"/>
        <property name="restartAlways" kind="boolean" default="false" description="Restart policy : Always"
                  category="Advanced"/>
        <property name="registryHost" required="false" category="Registry"/>
        <property name="registryPort" required="false" kind="integer" default="5000" category="Registry"/>
        <property name="registryUsername" required="false" category="Registry" description="Registry username"/>
        <property name="registryPassword" required="false" password="true" category="Registry" description="Registry username"/>
        <property name="logDriver" required="false" category="Log" description="Logging driver for container "/>
    </type>

    <type-modification type="docker.Image">
        <property name="ports" kind="set_of_ci" referenced-type="docker.PortSpec" as-containment="true" required="false" category="Network"/>
        <property name="links" kind="set_of_ci" referenced-type="docker.LinkSpec" as-containment="true" required="false" category="Network"/>
        <property name="volumes" kind="set_of_ci" referenced-type="docker.VolumeSpec" as-containment="true" required="false" category="Volumes"/>
        <property name="variables" kind="set_of_ci" referenced-type="docker.EnvironmentVariableSpec" as-containment="true" required="false"
                  category="Variables"/>
    </type-modification>

    <type type="docker.Volume" deployable-type="docker.VolumeSpec" container-type="docker.RunContainer" extends="udm.BaseEmbeddedDeployed">
        <generate-deployable type="docker.VolumeSpec" extends="udm.BaseEmbeddedDeployable"/>
        <property name="source" description="location on the host"/>
        <property name="destination" description="location inside the container"/>
        <property name="mode" default="rw" description="mount mode rw/ro">
            <rule type="regex" pattern="rw|ro"
                  message="Mode can be either 'rw' or 'ro'. "/>
        </property>
    </type>

    <type type="docker.Link" deployable-type="docker.LinkSpec" container-type="docker.RunContainer" extends="udm.BaseEmbeddedDeployed">
        <generate-deployable type="docker.LinkSpec" extends="udm.BaseEmbeddedDeployable"/>
        <property name="alias" required="false"/>
    </type>

    <type type="docker.Port" deployable-type="docker.PortSpec" container-type="docker.RunContainer" extends="udm.BaseEmbeddedDeployed">
        <generate-deployable type="docker.PortSpec" extends="udm.BaseEmbeddedDeployable"/>
        <property name="hostPort" required="false" kind="integer"/>
        <property name="containerPort" kind="integer"/>
        <property name="protocol" default="tcp" required="false" description="e.g udp or tcp"/>
        <property name="testPort" kind="boolean" category="Advanced" default="false" required="false" description="Test if the port is open once the container has been started."/>
    </type>

    <type type="docker.EnvironmentVariable" deployable-type="docker.EnvironmentVariableSpec" container-type="docker.RunContainer"
          extends="udm.BaseEmbeddedDeployed">
        <generate-deployable type="docker.EnvironmentVariableSpec" extends="udm.BaseEmbeddedDeployable"/>
        <property name="value"/>
        <property name="separator" default="=" category="Advanced"
                  description="most of the time, it is '=' but something it can be ':' e.g. constraint:storage==ssd"/>
    </type>

    <type type="docker.DataFolderVolume" extends="udm.BaseDeployedArtifact" deployable-type="docker.Folder" container-type="docker.Machine">
        <generate-deployable type="docker.Folder" extends="udm.BaseDeployableFolderArtifact"/>
        <property name="volumeName"/>
        <property name="containerName"/>
        <property name="containerPath"/>
    </type>

    <type type="docker.DataFileVolume" extends="udm.BaseDeployedArtifact" deployable-type="docker.File" container-type="docker.Machine">
        <generate-deployable type="docker.File" extends="udm.BaseDeployableFileArtifact"/>
        <property name="volumeName"/>
        <property name="containerName"/>
        <property name="containerPath"/>
    </type>

    <type type="docker.ComposedContainers" extends="udm.BaseDeployedArtifact" deployable-type="docker.ComposeFile" container-type="docker.Machine">
        <generate-deployable type="docker.ComposeFile" extends="udm.BaseDeployableFileArtifact"/>
        <property name="forceRecreate" kind="boolean" default="false" required="false" category="Advanced"/>
        <property name="dumpLogsAfterStartup" kind="boolean" default="false" description="Generate a step to dump log after start up the container"
                  category="Advanced"/>
    </type>

    <type-modification type="docker.ComposeFile">
        <property name="scanPlaceholders" default="true" kind="boolean"/>
        <property name="textFileNamesRegex" default=".+\.(yml | yaml)" hidden="true"/>
    </type-modification>


    <type type="docker.Network" extends="udm.BaseDeployed" deployable-type="docker.NetworkSpec" container-type="docker.Machine">
        <generate-deployable type="docker.NetworkSpec" extends="udm.BaseDeployable"/>
        <property name="driver"/>
    </type>


    <!-- Docker Swarm Service -->
    <type type="docker.SwarmNode" extends="docker.Machine">
    </type>

    <type type="docker.SwarmService" extends="udm.BaseDeployed" deployable-type="docker.SwarmServiceSpec" container-type="docker.SwarmNode">
        <generate-deployable type="docker.SwarmServiceSpec" extends="udm.BaseDeployable"/>
        <property name="image"/>
        <property name="replicas" kind="integer" description="Number of tasks"/>
        <property name="rollingUpdate" kind="boolean" category="Advanced" default="true" required="false" description="use a rolling update if there are modications"/>
        <property name="updateDelay" required="false" description="Delay between updates eg 10s"/>
        <property name="mode" default="replicated" description=" Service mode (replicated or global)"/>
        <property name="command" required="false"/>
        <property name="args" required="false"/>
        <property name="labels" kind="set_of_string" required="false" category="Labels"/>
        <property name="network" required="false" category="Network"/>
        <property name="ports" kind="set_of_ci" referenced-type="docker.SwarmServicePort" as-containment="true" required="false" category="Network"/>
        <property name="dependencies" kind="list_of_string" required="false" category="Deployment" description="list of containers that should be created or started before."/>
        <property name="variables" kind="set_of_ci" referenced-type="docker.SwarmEnvironmentVariable" as-containment="true" required="false" category="Variables"/>
        <property name="limitMemory" required="false" category="Advanced"/>
        <property name="reserveMemory" required="false" category="Advanced"/>
        <property name="workDirectory" required="false" kind="boolean" default="false" category="Advanced"/>
        <property name="dumpLogsAfterStartup" kind="boolean" default="true" description="Generate a step to dump log after start up the container" category="Advanced"/>
        <property name="checkContainerIsRunning" kind="boolean" default="true" description="Generate a step to check whether the container is up and running." category="Advanced"/>
        <property name="registryHost" required="false" category="Registry"/>
        <property name="registryPort" required="false" kind="integer" default="5000" category="Registry"/>
        <property name="registryUsername" required="false" category="Registry" description="Registry username"/>
        <property name="registryPassword" required="false" password="true" category="Registry" description="Registry username"/>
        <property name="logDriver" required="false" category="Log" description="Logging driver for container "/>
        <property name="logOpts" required="false" category="Log" kind="list_of_string" description="Logging options for container "/>
    </type>


    <type-modification type="docker.SwarmServiceSpec">
        <property name="ports" kind="set_of_ci" referenced-type="docker.SwarmServicePortSpec" as-containment="true" required="false" category="Network"/>
        <property name="variables" kind="set_of_ci" referenced-type="docker.SwarmEnvironmentVariableSpec" as-containment="true" required="false" category="Variables"/>
    </type-modification>

    <type type="docker.SwarmServicePort" deployable-type="docker.SwarmServicePortSpec" container-type="docker.SwarmService" extends="udm.BaseEmbeddedDeployed">
        <generate-deployable type="docker.SwarmServicePortSpec" extends="udm.BaseEmbeddedDeployable"/>
        <property name="hostPort" required="false" kind="integer"/>
        <property name="containerPort" kind="integer"/>
        <property name="protocol" default="tcp" required="false" description="e.g udp or tcp"/>
        <property name="testPort" kind="boolean" category="Advanced" default="false" required="false" description="Test if the port is open once the container has been started."/>
    </type>

    <type type="docker.SwarmEnvironmentVariable" deployable-type="docker.SwarmEnvironmentVariableSpec" container-type="docker.SwarmService"
          extends="udm.BaseEmbeddedDeployed">
        <generate-deployable type="docker.SwarmEnvironmentVariableSpec" extends="udm.BaseEmbeddedDeployable"/>
        <property name="value"/>
        <property name="separator" default="=" category="Advanced"
                  description="most of the time, it is '=' but something it can be ':' e.g. constraint:storage==ssd"/>
    </type>

    <type type="docker.DeployedDockerMachine" extends="udm.BaseDeployed" container-type="overthere.Host" deployable-type="docker.MachineSpec">
        <generate-deployable type="docker.MachineSpec" extends="udm.BaseDeployable"/>
        <property name="driver" default="virtualbox" description="Driver to create machine with."/>
        <property name="insecureRegistries" kind="list_of_string" required="false" description="insecure registries to allow with the created engine"/>
        <property name="engineOptions" kind="set_of_string" required="false" category="Engine"
                  description="Arbitrary flags to include with the created engine in the form flag=value"/>
        <property name="engineLabels" kind="set_of_string" required="false" category="Engine"
                  description="Specify labels for the created engine key=value"/>
        <property name="machineName" required="false" category="Provisioning"/>
        <property name="environmentId" required="false" category="Provisioning"/>
        <property name="containerTags" required="false" kind="set_of_string" category="Provisioning" description="Deployment tags on the created ci"/>
    </type>


    <type type="docker.machine.Provider" extends="udm.BaseContainer" description="Gateway to create new docker machines.">
        <property name="host" kind="ci" referenced-type="overthere.Host" as-containment="true"/>
    </type>

    <type type="docker.machine.Instance" extends="udm.BaseProvisioned"
          deployable-type="docker.machine.InstanceSpec"
          container-type="docker.machine.Provider" description="Docker Machine instance.">
        <generate-deployable type="docker.machine.InstanceSpec" extends="udm.BaseProvisionable" copy-default-values="true" description="Specification for an Docker Machine instance."/>
        <property name="driver" default="virtualbox" description="Driver to create machine with."/>
        <property name="machineName" required="false"/>
        <property name="insecureRegistries" kind="list_of_string" required="false" description="insecure registries to allow with the created engine"/>
        <property name="engineOptions" kind="set_of_string" required="false" category="Engine" description="Arbitrary flags to include with the created engine in the form flag=value"/>
        <property name="engineLabels" kind="set_of_string" required="false" category="Engine" description="Specify labels for the created engine key=value"/>
        <property name="docker_host" label="Docker Host" category="Output" required="false"/>
        <property name="docker_host_address" label="Docker Host Adress" category="Output" required="false"/>
        <property name="docker_cert_path" label="Docker Certificate Path" category="Output" required="false"/>
        <property name="docker_tls_verify" label="Docker TLS Verify" category="Output" required="false"/>
    </type>


    <type-modification type="docker.DockerMachineDictionary">
        <method name="loadDockerMachines" label="Load the Docker Machines:w " delegate="jythonScript"
                script="docker/load-docker-machine-in-dictionary.py">
        </method>
    </type-modification>

</synthetic>
